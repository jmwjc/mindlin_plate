using ApproxOperator
import ApproxOperator.GmshImport: getPhysicalGroups, get­ЮЉ┐рхб, getElements
import ApproxOperator.MindlinPlate: РѕФ╬║╬║d╬Е, РѕФQQd╬Е, РѕФQРѕЄwd╬Е, РѕФQwd╬Њ, РѕФQ¤єd╬Е, РѕФwqd╬Е, РѕФ¤єmd╬Е, РѕФ╬▒wwd╬Њ, РѕФ╬▒¤є¤єd╬Њ, РѕФwVd╬Њ, РѕФ¤єMd╬Њ, LРѓѓ, LРѓѓ¤є, LРѓѓQ

using TimerOutputs, WriteVTK, XLSX 
import Gmsh: gmsh

E = 1.0
╬й = 0.3
h = 1e-8
DрхЄ = E*h^3/12/(1-╬й^2)
D╦б = 5/6*E*h/(2*(1+╬й))

r = 3
w(x,y,z) = (x+y)^r
wРѓЂ(x,y,z) = r*(x+y)^abs(r-1)
wРѓѓ(x,y,z) = r*(x+y)^abs(r-1)
wРѓЂРѓЂ(x,y,z) = r*(r-1)*(x+y)^abs(r-2)
wРѓѓРѓѓ(x,y,z) = r*(r-1)*(x+y)^abs(r-2)
¤єРѓЂ(x,y,z) = r*(x+y)^abs(r-1)
¤єРѓѓ(x,y,z) = r*(x+y)^abs(r-1)
¤єРѓЂРѓЂ(x,y,z)  = r*(r-1)*(x+y)^abs(r-2)
¤єРѓЂРѓѓ(x,y,z)  = r*(r-1)*(x+y)^abs(r-2)
¤єРѓѓРѓЂ(x,y,z)  = r*(r-1)*(x+y)^abs(r-2)
¤єРѓѓРѓѓ(x,y,z)  = r*(r-1)*(x+y)^abs(r-2)
¤єРѓЂРѓЂРѓЂ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)
¤єРѓЂРѓЂРѓѓ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)
¤єРѓѓРѓѓРѓЂ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)
¤єРѓѓРѓѓРѓѓ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)
¤єРѓЂРѓѓРѓЂ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)
¤єРѓЂРѓѓРѓѓ(x,y,z)  = r*(r-1)*(r-2)*(x+y)^abs(r-3)

MРѓЂРѓЂ(x,y,z)= -DрхЄ*(¤єРѓЂРѓЂ(x,y,z)+╬й*¤єРѓѓРѓѓ(x,y,z))
MРѓЂРѓѓ(x,y,z)= -DрхЄ*(1-╬й)*0.5*(¤єРѓЂРѓѓ(x,y,z)+¤єРѓѓРѓЂ(x,y,z))
MРѓѓРѓѓ(x,y,z)= -DрхЄ*(╬й*¤єРѓЂРѓЂ(x,y,z)+¤єРѓѓРѓѓ(x,y,z))
MРѓЂРѓЂРѓЂ(x,y,z)= -DрхЄ*(¤єРѓЂРѓЂРѓЂ(x,y,z)+╬й*¤єРѓѓРѓѓРѓЂ(x,y,z))
MРѓЂРѓѓРѓѓ(x,y,z)= -DрхЄ*(1-╬й)*¤єРѓЂРѓѓРѓѓ(x,y,z)
MРѓЂРѓѓРѓЂ(x,y,z)= -DрхЄ*(1-╬й)*¤єРѓЂРѓѓРѓЂ(x,y,z)
MРѓѓРѓѓРѓѓ(x,y,z)= -DрхЄ*(╬й*¤єРѓЂРѓЂРѓѓ(x,y,z)+¤єРѓѓРѓѓРѓѓ(x,y,z))

QРѓЂ(x,y,z) = D╦б*(wРѓЂ(x,y,z)-¤єРѓЂ(x,y,z))
QРѓѓ(x,y,z) = D╦б*(wРѓѓ(x,y,z)-¤єРѓѓ(x,y,z))
QРѓЂРѓЂ(x,y,z) = D╦б*(wРѓЂРѓЂ(x,y,z)-¤єРѓЂРѓЂ(x,y,z))
QРѓѓРѓѓ(x,y,z) = D╦б*(wРѓѓРѓѓ(x,y,z)-¤єРѓѓРѓѓ(x,y,z))
q(x,y,z)=-QРѓЂРѓЂ(x,y,z)-QРѓѓРѓѓ(x,y,z)
mРѓЂ(x,y,z) = MРѓЂРѓЂРѓЂ(x,y,z)+MРѓЂРѓѓРѓѓ(x,y,z) - QРѓЂ(x,y,z)
mРѓѓ(x,y,z) = MРѓЂРѓѓРѓЂ(x,y,z)+MРѓѓРѓѓРѓѓ(x,y,z) - QРѓѓ(x,y,z)


const to = TimerOutput()

gmsh.initialize()
# @timeit to "open msh file" gmsh.open("msh/patchtest_3.msh")
# @timeit to "get nodes" nodes_s = get­ЮЉ┐рхб()

integrationOrder = 3
# РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђ
type_w = :tri3
type_¤є = :tri3
type_Q = :(ReproducingKernel{:Linear2D,:РќА,:CubicSpline})
type = eval(type_Q)
ndiv = 4
XLSX.openxlsx("xls/patchtest.xlsx", mode="w") do xf
for ndiv_q = 4:32
row = ndiv_q-2
@timeit to "open msh file" gmsh.open("msh/patchtest_tri3_$ndiv_q.msh")
@timeit to "get nodes" nodes_q = get­ЮЉ┐рхб()
@timeit to "get entities" entities = getPhysicalGroups()
xрхЏ = nodes_q.x
yрхЏ = nodes_q.y
zрхЏ = nodes_q.z
sp = RegularGrid(xрхЏ,yрхЏ,zрхЏ,n = 3,╬│ = 5)
nрхЏ = length(nodes_q)
s = 1/ndiv_q
sРѓЂ = 1.5*s*ones(nрхЏ)
sРѓѓ = 1.5*s*ones(nрхЏ)
sРѓЃ = 1.5*s*ones(nрхЏ)
push!(nodes_q,:sРѓЂ=>sРѓЂ,:sРѓѓ=>sРѓѓ,:sРѓЃ=>sРѓЃ)

@timeit to "calculate error" begin
    @timeit to "get elements" elements_q = getElements(nodes_q, entities["╬Е"], type, 10, sp)
    prescribe!(elements_q, :E=>E, :╬й=>╬й, :h=>h, :QРѓЂ=>QРѓЂ, :QРѓѓ=>QРѓѓ)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_q)
end
# РћђРћђРћђ Rotation РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђ
@timeit to "open msh file" gmsh.open("msh/patchtest_tri3_$ndiv.msh")
@timeit to "get nodes" nodes_¤є = get­ЮЉ┐рхб()
@timeit to "get entities" entities = getPhysicalGroups()

nрха = length(nodes_¤є)
kрхарха = zeros(2*nрха,2*nрха)
kрхЏрхЏ = zeros(2*nрхЏ,2*nрхЏ)
kрхЏрха = zeros(2*nрхЏ,2*nрха)
fрха = zeros(2*nрха)
fрхЏ = zeros(2*nрхЏ)

@timeit to "calculate РѕФ╬║╬║d╬Е" begin
    @timeit to "get elements" elements_Q = getElements(nodes_q, entities["╬Е"], type, integrationOrder, sp)
    @timeit to "get elements" elements = getElements(nodes_¤є, entities["╬Е"], integrationOrder)
    prescribe!(elements, :E=>E, :╬й=>╬й, :h=>h, :mРѓЂ=>mРѓЂ, :mРѓѓ=>mРѓѓ)
    prescribe!(elements_Q, :E=>E, :╬й=>╬й, :h=>h)
    @timeit to "calculate shape functions" setРѕЄ­ЮЮГ!(elements)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_Q)
    ­ЮЉјрхарха = РѕФ╬║╬║d╬Е=>elements
    ­ЮЉјрхЏрха = РѕФQ¤єd╬Е=>(elements_Q,elements)
    ­ЮЉјрхЏрхЏ = РѕФQQd╬Е=>elements_Q
    ­ЮЉЊрха = РѕФ¤єmd╬Е=>elements
    @timeit to "assemble" ­ЮЉјрхарха(kрхарха)
    @timeit to "assemble" ­ЮЉјрхЏрхЏ(kрхЏрхЏ)
    @timeit to "assemble" ­ЮЉјрхЏрха(kрхЏрха)
    @timeit to "assemble" ­ЮЉЊрха(fрха)
end

@timeit to "calculate РѕФ╬▒¤є¤єd╬Њ" begin
    @timeit to "get elements" elements_1 = getElements(nodes_¤є, entities["╬Њ┬╣"], integrationOrder, normal=true)
    @timeit to "get elements" elements_2 = getElements(nodes_¤є, entities["╬Њ┬▓"], integrationOrder, normal=true)
    @timeit to "get elements" elements_3 = getElements(nodes_¤є, entities["╬Њ┬│"], integrationOrder, normal=true)
    @timeit to "get elements" elements_4 = getElements(nodes_¤є, entities["╬ЊРЂ┤"], integrationOrder, normal=true)
    prescribe!(elements_1, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_2, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_3, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_4, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_1)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_2)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_3)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_4)
    ­ЮЉјрха = РѕФ╬▒¤є¤єd╬Њ=>elements_1Рѕфelements_2Рѕфelements_3Рѕфelements_4
    @timeit to "assemble" ­ЮЉјрха(kрхарха,fрха)
end

@timeit to "calculate error" begin
    @timeit to "get elements" elements_¤є = getElements(nodes_¤є, entities["╬Е"], 10)
    prescribe!(elements_¤є, :E=>E, :╬й=>╬й, :h=>h, :¤єРѓЂ=>¤єРѓЂ, :¤єРѓѓ=>¤єРѓѓ)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_¤є)
end

# РћђРћђРћђ Defelection РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђ
@timeit to "open msh file" gmsh.open("msh/patchtest_$type_w"*"_$ndiv.msh")
@timeit to "get nodes" nodes_w = get­ЮЉ┐рхб()
@timeit to "get entities" entities = getPhysicalGroups()

n╩и = length(nodes_w)
k╩и╩и = zeros(n╩и,n╩и)
kрхЏ╩и = zeros(2*nрхЏ,n╩и)
kрха╩и = zeros(2*nрха,n╩и)
f╩и = zeros(n╩и)
@timeit to "calculate РѕФQРѕЄwd╬Е" begin
    @timeit to "get elements" elements = getElements(nodes_w, entities["╬Е"], integrationOrder)
    prescribe!(elements, :E=>E, :╬й=>╬й, :h=>h, :mРѓЂ=>mРѓЂ, :mРѓѓ=>mРѓѓ, :q=>q)
    @timeit to "calculate shape functions" setРѕЄ­ЮЮГ!(elements)
    ­ЮЉјрхЏ╩и = РѕФQРѕЄwd╬Е=>(elements_Q,elements)
    ­ЮЉЊ╩и = РѕФwqd╬Е=>elements
    @timeit to "assemble" ­ЮЉјрхЏ╩и(kрхЏ╩и)
    @timeit to "assemble" ­ЮЉЊ╩и(f╩и)
end

@timeit to "calculate РѕФ╬▒wwd╬Њ РѕФQwd╬Њ" begin
    @timeit to "get elements" elements_1 = getElements(nodes_w, entities["╬Њ┬╣"], integrationOrder, normal=true)
    @timeit to "get elements" elements_2 = getElements(nodes_w, entities["╬Њ┬▓"], integrationOrder, normal=true)
    @timeit to "get elements" elements_3 = getElements(nodes_w, entities["╬Њ┬│"], integrationOrder, normal=true)
    @timeit to "get elements" elements_4 = getElements(nodes_w, entities["╬ЊРЂ┤"], integrationOrder, normal=true)
    @timeit to "get elements" elements_Q_1 = getElements(nodes_q, entities["╬Њ┬╣"], type, integrationOrder, sp, normal=true)
    @timeit to "get elements" elements_Q_2 = getElements(nodes_q, entities["╬Њ┬▓"], type, integrationOrder, sp, normal=true)
    @timeit to "get elements" elements_Q_3 = getElements(nodes_q, entities["╬Њ┬│"], type, integrationOrder, sp, normal=true)
    @timeit to "get elements" elements_Q_4 = getElements(nodes_q, entities["╬ЊРЂ┤"], type, integrationOrder, sp, normal=true)
    prescribe!(elements_1, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_2, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_3, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_4, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_Q_1,:g=>w)
    prescribe!(elements_Q_2,:g=>w)
    prescribe!(elements_Q_3,:g=>w)
    prescribe!(elements_Q_4,:g=>w)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_1)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_2)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_3)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_4)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_Q_1)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_Q_2)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_Q_3)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_Q_4)
    ­ЮЉјрхЏ = РѕФQwd╬Њ=>(elements_Q_1Рѕфelements_Q_2Рѕфelements_Q_3Рѕфelements_Q_4,elements_1Рѕфelements_2Рѕфelements_3Рѕфelements_4)
    @timeit to "assemble" ­ЮЉјрхЏ(kрхЏ╩и,fрхЏ)
end

@timeit to "calculate error" begin
    @timeit to "get elements" elements_w = getElements(nodes_w, entities["╬Е"], 10)
    prescribe!(elements_w, :E=>E, :╬й=>╬й, :h=>h, :u=>w)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_w)
end
# РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђ
# dрха = zeros(2*nрха)
# dрхЏ = zeros(2*nрхЏ)
# d╩и = zeros(n╩и)
# for node in nodes
#     x = node.x
#     y = node.y
#     z = node.z
#     dрха[2*node.­Юљ╝-1] = ¤єРѓЂ(x,y,z)
#     dрха[2*node.­Юљ╝]   = ¤єРѓѓ(x,y,z)
#     dрхЏ[2*node.­Юљ╝-1] = QРѓЂ(x,y,z)
#     dрхЏ[2*node.­Юљ╝]   = QРѓѓ(x,y,z)
#     d╩и[node.­Юљ╝] = w(x,y,z)
# end
# println(kрхарха*dрха+kрхЏрха'*dрхЏ - fрха)
# println(kрхарха*dрха+kрха╩и*d╩и+kрхЏрха'*dрхЏ - fрха)
# println(kрхЏрхЏ*dрхЏ)
# println(kрхЏ╩и*d╩и)
# println(kрхЏрхЏ*dрхЏ + kрхЏ╩и*d╩и)
# println(kрхЏ╩и*ones(n╩и).-fрхЏ)
# println(kрхарха*dрха + kрхЏрха'*dрхЏ - fрха)
# println(kрхЏрхЏ*dрхЏ + kрхЏрха*dрха + kрхЏ╩и*d╩и - fрхЏ)
# println(kрхЏ╩и'*dрхЏ + k╩и╩и*d╩и - f╩и)
# println(kрхЏрха*dрха)
# println(kрхЏ╩и*d╩и)
# println(kрхЏрхЏ*dрхЏ)
# println(kрхЏрхЏ*dрхЏ + kрхЏ╩и*d╩и)

# println([kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]*[dрха;d╩и;dрхЏ] .- [fрха;f╩и;fрхЏ])
@timeit to "solve" d = [kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]\[fрха;f╩и;fрхЏ]
# println([kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]*d .- [fрха;f╩и;fрхЏ])
push!(nodes_¤є,:dРѓЂ=>d[1:2:2*nрха], :dРѓѓ=>d[2:2:2*nрха])
push!(nodes_w,:d=>d[2*nрха+1:2*nрха+n╩и])
push!(nodes_q,:qРѓЂ=>d[2*nрха+n╩и+1:2:end], :qРѓѓ=>d[2*nрха+n╩и+2:2:end])

@timeit to "calculate error" begin
    LРѓѓ_w = LРѓѓ(elements_w)
    LРѓѓ_¤є = LРѓѓ¤є(elements_¤є)
    LРѓѓ_Q = LРѓѓQ(elements_q)
end

points = zeros(3, nрхЏ)
for node in nodes_q
    I = node.­Юљ╝
    points[1,I] = node.x
    points[2,I] = node.y
    points[3,I] = node.z
end
# cells = [MeshCell(VTKCellTypes.VTK_TRIANGLE, [node.­Юљ╝ for node in elm.­ЮЊњ]) for elm in elements]
cells = [MeshCell(VTKCellTypes.VTK_TRIANGLE_STRIP, [node.­Юљ╝ for node in elm.­ЮЊњ]) for elm in elements_q]
vtk_grid("vtk/square.vtu", points, cells) do vtk
    vtk["QРѓЂ"] = [node.qРѓЂ for node in nodes_q]
    vtk["QРѓѓ"] = [node.qРѓѓ for node in nodes_q]
    vtk["Q╠ёРѓЂ"] = [QРѓЂ(node.x,node.y,node.z) for node in nodes_q]
    vtk["Q╠ёРѓѓ"] = [QРѓѓ(node.x,node.y,node.z) for node in nodes_q]
end

# println(to)

println("LРѓѓ error of w: ", LРѓѓ_w)
println("LРѓѓ error of ¤є: ", LРѓѓ_¤є)
println("LРѓѓ error of Q: ", LРѓѓ_Q)
# РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђ
    sheet = xf[1]
    XLSX.rename!(sheet, "new_sheet")
    sheet["A1"] = "type w"
    sheet["B1"] = "n╩и"
    sheet["C1"] = "type ¤є"
    sheet["D1"] = "nрха"
    sheet["E1"] = "type Q"
    sheet["F1"] = "nрхЏ"
    sheet["G1"] = "LРѓѓw"
    sheet["H1"] = "LРѓѓ¤є"
    sheet["I1"] = "LРѓѓQ"
    sheet["A$row"] = "$type_w"
    sheet["B$row"] = n╩и
    sheet["C$row"] = "$type_¤є"
    sheet["D$row"] = nрха
    sheet["E$row"] = "$type_Q"
    sheet["F$row"] = nрхЏ
    sheet["G$row"] = LРѓѓ_w
    sheet["H$row"] = LРѓѓ_¤є
    sheet["I$row"] = LРѓѓ_Q
end
end
gmsh.finalize()


