using ApproxOperator
import ApproxOperator.GmshImport: getPhysicalGroups, get­ЮЉ┐рхб, getElements
import ApproxOperator.MindlinPlate: РѕФ╬║╬║d╬Е, РѕФQQd╬Е, РѕФРѕЄQwd╬Е, РѕФQwd╬Њ, РѕФQ¤єd╬Е, РѕФwqd╬Е, РѕФ¤єmd╬Е, РѕФ╬▒wwd╬Њ, РѕФ╬▒¤є¤єd╬Њ, РѕФwVd╬Њ, РѕФ¤єMd╬Њ, LРѓѓ, LРѓѓ¤є, LРѓѓQ

using TimerOutputs, WriteVTK 
import Gmsh: gmsh

E = 10.92e6
╬й = 0.3
h = 1e-0
DрхЄ = E*h^3/12/(1-╬й^2)
D╦б = 5/6*E*h/(2*(1+╬й))

w(x,y,z) = 1/3*x^3*(x-1)^3*y^3*(y-1)^3-2*h^2/(5*(1-╬й))*(y^3*(y-1)^3*x*(x-1)*(5*x^2-5*x+1)+x^3*(x-1)^3*y*(y-1)*(5*y^2-5*y+1))
wРѓЂ(x,y,z) = (x-1)^2*x^2*(2*x-1)*(y-1)^3*y^3-2*h^2/(5*(1-╬й))*((20*x^3-30*x^2+12*x-1)*(y-1)^3*y^3+3*(x-1)^2*x^2*(2*x-1)*(y-1)*y*(5*y^2-5*y+1))
wРѓѓ(x,y,z) = (x-1)^3*x^3*(y-1)^2*y^2*(2*y-1)-2*h^2/(5*(1-╬й))*(3*(x-1)*x*(5*x^2-5*x+1)*(y-1)^2*y^2*(2*y-1)+x^3*(x-1)^3*(20*y^3-30*y^2+12*y-1))
¤єРѓЂ(x,y,z) = y^3*(y-1)^3*x^2*(x-1)^2*(2*x-1)
¤єРѓѓ(x,y,z) = x^3*(x-1)^3*y^2*(y-1)^2*(2*y-1)
q(x,y,z) = E*h^3/(12*(1-╬й^2))*(12*y*(y-1)*(5*x^2-5*x+1)*(2*y^2*(y-1)^2+x*(x-1)*(5*y^2-5*y+1))+12*x*(x-1)*(5*y^2-5*y+1)*(2*x^2*(x-1)^2+y*(y-1)*(5*x^2-5*x+1)))

QРѓЂ(x,y,z) = D╦б*(wРѓЂ(x,y,z)-¤єРѓЂ(x,y,z))
QРѓѓ(x,y,z) = D╦б*(wРѓѓ(x,y,z)-¤єРѓѓ(x,y,z))

const to = TimerOutput()

gmsh.initialize()
# @timeit to "open msh file" gmsh.open("msh/patchtest_3.msh")
# @timeit to "get nodes" nodes_s = get­ЮЉ┐рхб()

@timeit to "open msh file" gmsh.open("msh/patchtest_tri3_4.msh")
@timeit to "get entities" entities = getPhysicalGroups()
@timeit to "get nodes" nodes = get­ЮЉ┐рхб()

n╩и = length(nodes)
nрха = length(nodes)
nрхЏ = length(nodes)
k╩и╩и = zeros(n╩и,n╩и)
kрхарха = zeros(2*nрха,2*nрха)
kрхЏрхЏ = zeros(2*nрхЏ,2*nрхЏ)
kрха╩и = zeros(2*nрха,n╩и)
kрхЏ╩и = zeros(2*nрхЏ,n╩и)
kрхЏрха = zeros(2*nрхЏ,2*nрха)
f╩и = zeros(n╩и)
fрха = zeros(2*nрха)
fрхЏ = zeros(2*nрхЏ)

integrationOrder = 2
@timeit to "calculate РѕФ╬║╬║d╬Е" begin
    @timeit to "get elements" elements = getElements(nodes, entities["╬Е"], integrationOrder)
    @timeit to "get elements" elements_╬Њ = getElements(nodes, entities["╬Њ"], integrationOrder, normal=true)
    prescribe!(elements, :E=>E, :╬й=>╬й, :h=>h, :q=>q)
    @timeit to "calculate shape functions" setРѕЄ­ЮЮГ!(elements)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_╬Њ)
    ­ЮЉјрхарха = РѕФ╬║╬║d╬Е=>elements
    ­ЮЉјрхЏрха = РѕФQ¤єd╬Е=>elements
    ­ЮЉјрхЏрхЏ = РѕФQQd╬Е=>elements
    ­ЮЉјрхЏ╩и = [
        РѕФРѕЄQwd╬Е=>elements,
        РѕФQwd╬Њ=>elements_╬Њ,
    ]
    ­ЮЉЊ╩и = РѕФwqd╬Е=>elements
    # @timeit to "assemble" ­ЮЉјрхарха(kрхарха)
    @timeit to "assemble" ­ЮЉјрхЏрхЏ(kрхЏрхЏ)
    # @timeit to "assemble" ­ЮЉјрхЏрха(kрхЏрха)
    @timeit to "assemble" ­ЮЉјрхЏ╩и(kрхЏ╩и)
    @timeit to "assemble" ­ЮЉЊ╩и(f╩и)
end

@timeit to "calculate РѕФ╬▒wwd╬Њ РѕФQwd╬Њ" begin
    @timeit to "get elements" elements_1 = getElements(nodes, entities["╬Њ┬╣"], integrationOrder, normal=true)
    @timeit to "get elements" elements_2 = getElements(nodes, entities["╬Њ┬▓"], integrationOrder, normal=true)
    @timeit to "get elements" elements_3 = getElements(nodes, entities["╬Њ┬│"], integrationOrder, normal=true)
    @timeit to "get elements" elements_4 = getElements(nodes, entities["╬ЊРЂ┤"], integrationOrder, normal=true)
    prescribe!(elements_1, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_2, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_3, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    prescribe!(elements_4, :╬▒=>1e8*E, :g=>w, :gРѓЂ=>¤єРѓЂ, :gРѓѓ=>¤єРѓѓ, :nРѓЂРѓЂ=>1.0, :nРѓЂРѓѓ=>0.0, :nРѓѓРѓѓ=>1.0)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_1)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_2)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_3)
    @timeit to "calculate shape functions" set­ЮЮГ!(elements_4)
    ­ЮЉјрха = РѕФ╬▒¤є¤єd╬Њ=>elements_1Рѕфelements_2Рѕфelements_3Рѕфelements_4
    @timeit to "assemble" ­ЮЉјрха(kрхарха,fрха)
    ­ЮЉјрхЏ = РѕФQwd╬Њ=>elements_1Рѕфelements_2Рѕфelements_3Рѕфelements_4
    @timeit to "assemble" ­ЮЉјрхЏ(kрхЏ╩и,fрхЏ)
    # ­ЮЉј╩и = РѕФ╬▒wwd╬Њ=>elements_1Рѕфelements_2Рѕфelements_3Рѕфelements_4
    # @timeit to "assemble" ­ЮЉј╩и(k╩и╩и,f╩и)
end

dрха = zeros(2*nрха)
dрхЏ = zeros(2*nрхЏ)
d╩и = zeros(n╩и)
for node in nodes
    x = node.x
    y = node.y
    z = node.z
    dрха[2*node.­Юљ╝-1] = ¤єРѓЂ(x,y,z)
    dрха[2*node.­Юљ╝]   = ¤єРѓѓ(x,y,z)
    dрхЏ[2*node.­Юљ╝-1] = QРѓЂ(x,y,z)
    dрхЏ[2*node.­Юљ╝]   = QРѓѓ(x,y,z)
    d╩и[node.­Юљ╝] = w(x,y,z)
end
# println(kрхЏрхЏ*dрхЏ)
# println(kрхЏ╩и*d╩и)
# println(kрхЏрхЏ*dрхЏ + kрхЏ╩и*d╩и)
# println(kрхЏ╩и*ones(n╩и).-fрхЏ)
println(kрхарха*dрха + kрхЏрха'*dрхЏ - fрха)
# println(kрхЏрхЏ*dрхЏ + kрхЏрха*dрха + kрхЏ╩и*d╩и - fрхЏ)
# println(kрхЏ╩и'*dрхЏ + k╩и╩и*d╩и - f╩и)
# println(kрхЏрха*dрха)
# println(kрхЏ╩и*d╩и)
# println(kрхЏрхЏ*dрхЏ)
# println(kрхЏрхЏ*dрхЏ + kрхЏ╩и*d╩и)

# println([kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]*[dрха;d╩и;dрхЏ] .- [fрха;f╩и;fрхЏ])
# @timeit to "solve" d = [kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]\[fрха;f╩и;fрхЏ]
# println([kрхарха kрха╩и kрхЏрха';kрха╩и' k╩и╩и kрхЏ╩и';kрхЏрха kрхЏ╩и kрхЏрхЏ]*d .- [fрха;f╩и;fрхЏ])
# push!(nodes,:d=>d[2*nрха+1:2*nрха+n╩и], :dРѓЂ=>d[1:2:2*nрха], :dРѓѓ=>d[2:2:2*nрха], :qРѓЂ=>d[2*nрха+n╩и+1:2:end], :qРѓѓ=>d[2*nрха+n╩и+2:2:end])

# @timeit to "calculate error" begin
#     @timeit to "get elements" elements = getElements(nodes, entities["╬Е"], 10)
#     prescribe!(elements, :E=>E, :╬й=>╬й, :h=>h, :u=>w, :¤єРѓЂ=>¤єРѓЂ, :¤єРѓѓ=>¤єРѓѓ, :QРѓЂ=>QРѓЂ, :QРѓѓ=>QРѓѓ)
#     @timeit to "calculate shape functions" set­ЮЮГ!(elements)
#     LРѓѓ_w = LРѓѓ(elements)
#     LРѓѓ_¤є = LРѓѓ¤є(elements)
#     LРѓѓ_Q = LРѓѓQ(elements)
# end

gmsh.finalize()

# points = zeros(3, n╩и)
# for node in nodes
#     I = node.­Юљ╝
#     points[1,I] = node.x
#     points[2,I] = node.y
#     points[3,I] = node.z
# end
# # cells = [MeshCell(VTKCellTypes.VTK_TRIANGLE, [node.­Юљ╝ for node in elm.­ЮЊњ]) for elm in elements]
# cells = [MeshCell(VTKCellTypes.VTK_TRIANGLE_STRIP, [node.­Юљ╝ for node in elm.­ЮЊњ]) for elm in elements]
# vtk_grid("vtk/square.vtu", points, cells) do vtk
#     vtk["QРѓЂ"] = [node.qРѓЂ for node in nodes]
#     vtk["QРѓѓ"] = [node.qРѓѓ for node in nodes]
#     vtk["Q╠ёРѓЂ"] = [QРѓЂ(node.x,node.y,node.z) for node in nodes]
#     vtk["Q╠ёРѓѓ"] = [QРѓѓ(node.x,node.y,node.z) for node in nodes]
# end

# println(to)

# println("LРѓѓ error of w: ", LРѓѓ_w)
# println("LРѓѓ error of ¤є: ", LРѓѓ_¤є)
# println("LРѓѓ error of Q: ", LРѓѓ_Q)


